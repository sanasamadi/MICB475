# load packages
req_packages <- c("MASS", "phyloseq", "ape", "tidyverse", "vegan")
lapply(req_packages, library, character.only = TRUE)

# load data
otu <- read_tsv("feature-table.txt", skip = 1)
meta <- read_tsv("colombia_metadata.txt")
tax <- read_tsv("taxonomy.tsv")
phylotree <- read.tree("tree.nwk")

# removing redundant columns
select <- dplyr::select
meta_select <- meta |>
  select(-c(age_range, country))
colnames(meta_select)

#### Format OTU table ####
# save everything except first column (OTU ID) into a matrix
otu_mat <- as.matrix(otu[,-1])
# make first column (#OTU ID) the rownames of the new matrix
rownames(otu_mat) <- otu$`#OTU ID`
# use the "otu_table" function to make an OTU table
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE) 


#### Format sample metadata ####
# save everything except sampleid as new data frame
samp_df <- as.data.frame(meta_select[,-1])
# make sampleids the rownames
colnames(meta)
rownames(samp_df)<- meta_select$`#SampleID`
# make phyloseq sample data with sample_data() function
SAMP <- sample_data(samp_df)

#### Formatting taxonomy ####
# convert taxon strings to a table with separate taxa rank columns
colnames(tax)
tax_mat <- tax |>
  separate(col=Taxon, sep="; "
           , into = c("Domain", "Phylum", "Class", 
                      "Order", "Family", "Genus", "Species")) |>
  as.matrix() # Saving as a matrix
# save everything except feature IDS
tax_mat <- tax_mat[,-1]
# make sampleids the rownames
rownames(tax_mat) <- tax$`Feature ID`
# make taxa table
TAX <- tax_table(tax_mat)

#### Create phyloseq object ####
# merge all into a phyloseq object
COLOMBIA <- phyloseq(OTU, SAMP, TAX, phylotree)

# view components of phyloseq object with the following commands
otu_table(COLOMBIA)
sample_data(COLOMBIA)
tax_table(COLOMBIA)
phy_tree(COLOMBIA)

# removing mitochondria and chloroplasts
COLOMBIA_filt <- subset_taxa(COLOMBIA, Domain == "d__Bacteria" 
                             & Class!="c__Chloroplast" & Family!="f__Mitochondria")

# removing NA's from systolic bp entry
COLOMBIA_final <- subset_samples(COLOMBIA_filt, !is.na(systolic_bp) )


######## Setting up richness loop ########
# Calculate richness metric
estrich <- estimate_richness(COLOMBIA_final)
# Extract sample data
sampdata <- data.frame(sample_data(COLOMBIA_final))

######## Alpha diversity loop to test each individual predictor ###########

# make vector of column names
allPredictors <- colnames(sampdata)
# make a vector that is just shannon
shannon_vec <- estrich$Shannon

# alpha diversity loop
resultsListalpha <- list()
for ( x in allPredictors ) {
  # making linear model
  model <- lm(shannon_vec ~ get(x), data = sampdata)
  # saving the model summary
  modelsummary <- summary(model)
  # saving the modelsummary in our list
  resultsListalpha[[x]] <- modelsummary
  
}

# calling the list
resultsListalpha


# create new folder for alpha diversity if you want
dir.create("AlphaDiversity")
setwd("AlphaDiversity")

# open file to save
sink(file="resultsListalpha_shannon_all_predictors.txt") 
resultsListalpha # Captures this output
sink() # closes the file and saves it)


# loop for alpha diversity plots
richness_plots <- list()

for (x in allPredictors) {
  richness_plots[[x]] <- plot_richness(COLOMBIA_final, x = x, measures = c("Shannon")) +
    geom_boxplot() +
    theme(axis.text.x = element_text(angle = 0, hjust = 1))
  
}

richness_plots

# save all plot objects using ggsave
for (i in seq_along(allPredictors)) {
  ggsave(filename = paste0("plot_richness_", allPredictors[i], ".png"), 
         plot = richness_plots[[i]], 
         height = 4, width = 6)
 
}

# go back to parent directory if a new directory was made
setwd("..")


#### Beta diversity #####

# object for distance matrix
dm <- distance(otu_table(COLOMBIA_final), method="bray")

# beta diversity loop
resultsListbeta <- list()

for ( x in allPredictors ) {
  permanova_results <- adonis2(dm ~ get(x), data = sampdata, permutations = 10000)
  # saving the summary
  permanova_summary <- summary(permanova_results)
  # saving the modelsummary to the list
  resultsListbeta[[x]] <- permanova_summary
  
}
resultsListbeta 

#create new folder for beta diversity
dir.create("BetaDiversity")
setwd("BetaDiversity")

# open file to save
sink(file="resultsListbeta_bray_all_predictors.txt") 
resultsListbeta # Captures this output
sink() # closes the file and saves it)
